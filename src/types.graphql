scalar Date
scalar JSON
scalar Long

type Query {
    hello(name: String): String
    thing(id: ID!): Thing
    things: [Thing!]
    person(id: ID!): Person
    people: [Person!]
    place(id: ID!): Place
    places: [Place!]
    movie(id: ID!): Movie
    movies(director: ID, directors: [ID!], actor: ID, actors: [ID!]): [Movie!]
    show(id: ID!): Show
    shows: [Show!]
    game(id: ID!): VideoGame
    games: [VideoGame!]
    occupation(id: ID!): Occupation
    occupations: [Occupation!]
    book(id: ID!): Book
    books: [Book!]
    product(id: ID!): Product
    products: [Product!]
    audiobook(id: ID!): AudioBook
    audiobooks: [AudioBook!]
    country(id: ID!): Country
    countries: [Country!]
}

type Mutation {
    deleteThing(id: ID!): Boolean
    createPerson(data: JSON): Person
    createMovie(data: JSON): Movie
    updatePerson(id: ID!, data: JSON): Person
}

type Thing{
    id: ID!
    description: String
    disambiguatingDescription: String
    name: String
    alternateName: String
    alternateNames: [String!]
    sameAs: ID
    node: JSON!
}

union OrgOrPerson = Person | Organization

type CreativeWork inherits Thing {
    creator: OrgOrPerson
    # Indicates the primary entity described in some page or other CreativeWork.
    mainEntity:	Thing
    # The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
    producer: OrgOrPerson
    # The service provider, service operator, or service performer; the goods producer.
    # Another party (a seller) may offer those services or goods on behalf of the provider.
    # A provider may also serve as the seller. Supersedes carrier.
    provider: OrgOrPerson

    isBasedOn: CreativeWork
}

type Value {
    value: String
    minValue: Long
    maxValue: Long
}

type QuantitativeValue inherits Value {
    unitCode: Long
}

type MonetaryAmount inherits Value {
    currency: Text!
}

type Occupation inherits Thing {
    estimatedSalary : MonetaryAmount
}

type Person inherits Thing{
    birthPlace: Place
    givenName: String
    familyName: String
    gender: String
    agent: OrgOrPerson
    knows: [Person!]
    occupation: Occupation
    occupations: [Occupation!]
    parent: Person!
    parents: [Person!]
    child: Person!
    children: [Person!]
    sibling: Person
    siblings: [Person!]
    spouse: Person
    spouses: [Person!]
    birthDate: Date
    # Nationality of the person.
    nationality: Country
}

type Place inherits Thing{
    address: String
    containedInPlace: Place
    containsPlace: Place
    telephone: Text
}

type Country inherits Place {
    address: String
    containedInPlace: Place
    containsPlace: Place
    telephone: Text
}

type Organization inherits Thing{
    alumni: [Person]
    department: Organization
}

type Text inherits Thing {
    value: String!
}

union Address = PostalAddress | Text

type PostalAddress inherits Thing{
    postalCode: String
    streetAddress: Address
}

type Genre inherits Thing {
    value: String!
}

type Movie inherits CreativeWork{
    genre: Genre
    genres: [Genre]
    description: String
    actors: [Person]
    directors: [Person]
}

type Show inherits CreativeWork{
    genre: Genre
    genres: [Genre]
    description: String
    episodes: [Episode!]
    seasons: [CreativeWorkSeason!]
    actors: [CreativeWorkSeason!]
    directors: [Person!]
    numberOfEpisodes: Long
    numberOfSeasons: Long
}

type CreativeWorkSeason inherits CreativeWork {
    partOfShow: Show!
    episodes: [Episode]
    seasonNumber: Long
}

type Episode inherits CreativeWork{
    partOfShow: Show!
    partOfSeason: CreativeWorkSeason
    episodeNumber: Long
    productionCompany: Organization
}

enum DayOfWeek{
    Friday
    Monday
    PublicHolidays
    Saturday
    Sunday
    Thursday
    Tuesday
    Wednesday
}

enum OrderStatus{
    OrderCancelled
    OrderDelivered
    OrderInTransit
    OrderPaymentDue
    OrderPickupAvailable
    OrderProblem
    OrderProcessing
    OrderReturned
}

type Action inherits Thing{
    value: String!
}

type Game inherits CreativeWork {
    numberOfPlayers: QuantitativeValue
}

enum GamePlayMode {
    CoOp
    MultiPlayer
    SinglePlayer
}

type VideoGameConsole inherits Thing {
    releaseDate: Date
}

type VideoGame inherits Game {
    playMode: [GamePlayMode!]
    gamePlatform: [VideoGameConsole!]
}

# The publication format of the book.
enum BookFormat {
    AudiobookFormat
    EBook
    GraphicNovel
    Hardcover
    Paperback
}

type Book inherits CreativeWork {
    # Indicates whether the book is an abridged edition.
    abridged: Boolean
    # The edition of the book.
    bookEdition: Text
    # The format of the book.
    bookFormat: BookFormat
    # The illustrator of the book.
    illustrator: Person
    # The ISBN of the book.
    isbn: Text
    # The number of pages in the book.
    numberOfPages: Int
}

type AudioBook inherits Book {
    # The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.
    # duration: Duration
    # A person who reads (performs) the audiobook.
    readBy: Person
}

type Product inherits Thing {
    # The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
    sku: Text
}